#version 330 core

// Input data binded and passed in cpp code
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexColor; // add it?
layout(location = 2) in vec3 vertexNormal_modelspace; 

// this data is send to fragment sheder
// Output data ; will be interpolated for each fragment.
out vec3 fragmentColor;
out vec3 Position_worldspace;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;
out vec3 PlayerLightDirection_cameraspace;

// Values that stay constant for the whole mesh.
uniform mat4 MVP; // matrices data, camera and models
uniform mat4 V;
uniform mat4 M;
uniform mat4 itM; // inverse transpose M
uniform vec3 LightPosition_worldspace;
uniform vec3 PlayerLightPosition_worldspace;
uniform bool isWall;
uniform vec3 colour;

void main(){
	float wallDistance = distance(PlayerLightPosition_worldspace, vertexPosition_modelspace);

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	
	// Position of the vertex, in worldspace : M * position
	Position_worldspace = (M * vec4(vertexPosition_modelspace,1)).xyz;
	
	// Vector that goes from the vertex to the camera, in camera space.
	// In camera space, the camera is at the origin (0,0,0).
	vec3 vertexPosition_cameraspace = ( V * M * vec4(vertexPosition_modelspace,1)).xyz;
	EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

	// Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
	vec3 LightPosition_cameraspace = ( V * vec4(LightPosition_worldspace,1)).xyz;
	//vec3 PlayerLightPosition_cameraspace = ( vec4(PlayerLightPosition_worldspace,1)).xyz;
	vec3 PlayerLightPosition_cameraspace = ( V * vec4(PlayerLightPosition_worldspace,1)).xyz;

	LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;
	//PlayerLightDirection_cameraspace = PlayerLightPosition_cameraspace + vec3(0,0,0) - (  M * vec4(vertexPosition_modelspace,1)).xyz;
	PlayerLightDirection_cameraspace = PlayerLightPosition_cameraspace + EyeDirection_cameraspace;
	// Normal of the the vertex, in camera space
	//Normal_cameraspace = ( V * itM * vec4(vertexNormal_modelspace,0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
	Normal_cameraspace = ( itM * vec4(vertexNormal_modelspace,1)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.

	if (isWall)
		fragmentColor = vec3(0.0f,0.0f, 7 - wallDistance/3); // 10 - wallDistance * 0.37f
	else
		fragmentColor = colour; // vec3(1.0f,0.0f, 0) + 
}